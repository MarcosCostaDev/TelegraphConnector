name: Release Pipeline

on:
  push:
    branches:
      - pre-release
      - release

env:
    working_dir: src
    connector_path: src/TelegraphConnector/TelegraphConnector.csproj
    parses_path: src/TelegraphConnector.Parses/TelegraphConnector.Parses.csproj

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Update version
      id: deployversion
      run: |
        BUILD_NUMBER="${{ github.run_number }}"
        # Get the current year, month, and day
        year=$(date +%Y)
        month=$(date +%m)
        day=$(date +%d)
        
        # Calculate the number of days since the start of the month
        days_since_start=$((day - 1))
        
        # Calculate the number of days since the last Wednesday
        days_since_wednesday=$(((4 + days_since_start) % 7))
        
        # Calculate the week of the month (1-based)
        week=$(((days_since_start + 3) / 7 + 1))

        if [[ $month -lt 10 ]]; then
            week="0$month"
        fi

        if [[ $week -lt 10 ]]; then
            week="0$week"
        fi
                
        version="$year.$month.$week$BUILD_NUMBER"

        build_name="package-v$version"

        echo "version=$version" >> $GITHUB_OUTPUT

        echo "build_name=$build_name" >> $GITHUB_OUTPUT

    - name: show variables
      run: |
        echo ${{ env.working_dir }}
        echo ${{ env.connector_path }}
        echo ${{ env.parses_path }}
        echo ${{ steps.deployversion.outputs.build_name }}
        echo ${{ steps.deployversion.outputs.version }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x

    - name: Build solution
      run: dotnet build ${{ env.working_dir }} -c Release

    - name: Run tests
      run: dotnet test ${{ env.working_dir }}

    - name: Create NuGet package for telegraph connector
      run: dotnet pack ${{ env.connector_path }} -p:Version='${{ steps.deployversion.outputs.version }}' --version-suffix "pre" -c Release --no-build --no-restore 

    - name: Create NuGet package for telegraph connector parses
      run: dotnet pack ${{ env.parses_path }} -p:Version='${{ steps.deployversion.outputs.version }}' --version-suffix "pre" -c Release --no-build --no-restore 

    - name: Upload NuGet package to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: nugetPackage
        path: |
            ${{ env.working_dir }}/TelegraphConnector/bin/Release/
            ${{ env.working_dir }}/TelegraphConnector.Parses/bin/Release/
            

  pre_release:
    runs-on: ubuntu-latest    
    needs: build
    if: github.ref == 'refs/heads/pre-release'   
    
    steps:  
    - name: Download nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: nugetPackage
    - name: Prep packages
      run: dotnet nuget add source --username MarcosCostaDev --password ${{ secrets.GH_KEY }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/marcoscostadev/index.json"
    - name: Push package to GitHub packages 
      run: dotnet nuget push nugetPackage/**/*.nupkg --api-key ${{ secrets.GH_KEY }}  --source "github"
    - name: Deploy NuGet package
      run: dotnet nuget push nugetPackage/**/*.nupkg -k ${{ secrets.GH_KEY }} -s "github"

  release:
    runs-on: ubuntu-latest    
    needs: build
    if: github.ref == 'refs/heads/release'   
    
    steps:  
    - name: Download nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: nugetPackage
    - name: Prep packages
      run: dotnet nuget add source --username MarcosCostaDev --password ${{ secrets.GH_KEY }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/marcoscostadev/index.json"
    - name: Push package to GitHub packages 
      run: dotnet nuget push nugetPackage/**/*.nupkg --api-key ${{ secrets.GH_KEY }}  --source "github"
    - name: Deploy NuGet package
      run: dotnet nuget push ./nuget/**/*.nupkg -k ${{ secrets.GH_KEY }} -s "github"
  tag: 
    runs-on: ubuntu-latest    
    needs: [release, pre_release]
    steps:
    - name: Create tag
      run: |
        git tag v${{ jobs.build.steps.deployversion.outputs.version }}
        git push origin v${{ jobs.build.steps.deployversion.outputs.version }}